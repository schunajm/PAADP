NULL
}
####Resample for Counts#####
dat3 <- if((finsamprate != 30 & finsamprate != 40 & finsamprate != 50 &
finsamprate != 60 & finsamprate != 70 & finsamprate != 80 &
finsamprate != 90 & finsamprate != 100) &
(sum(vlist$vars=="COUNTS")==1 | sum(vlist$vars=="COUNTS_LF")==1)==T){
rsampdat3 <- function(x){
gsignal::resample(x, 30, gtfz)
}
data.frame(apply(dat1, 2, rsampdat3))
} else{
dat1
}
####Store the Dat3 Sampling Frequency#####
dat3fz <- (nrow(dat3)/nrow(dat1)) * finsamprate
####Restrict Resampled Data to Complete Data for the Epoch Specified#####
dat1 <- head(dat1, trunc(nrow(dat1)/(finsamprate*vlist$epoch))*(finsamprate*vlist$epoch))
dat3 <- head(dat3, trunc(nrow(dat3)/(dat3fz*vlist$epoch))*(dat3fz*vlist$epoch))
} else if(vlist$extenin == "cwa"){
###Read Data In####
invisible(gtdat1len <- ceiling(((GGIRread::readAxivity(files)$header$blocks)*120)/300)+1); gc()
invisible(gtdat1 <- GGIRread::readAxivity(files, end = gtdat1len))
####Get Data We Need####
gtfz <- gtdat1$header$frequency; gtstime <- as.POSIXct(gtdat1$header$start, tz="UTC")
gtlength <- dim(gtdat1$data)[1]
####Resample To Desired Frequency#####
dat1 <- if(gtfz == vlist$resampfz | vlist$resamp == "False"){
dat <- gtdat1$data[,2:4]
names(dat) <- c("X","Y","Z")
dat
} else{
X <- PAADPh::round2(gsignal::resample(gtdat1$data$x, vlist$resampfz, gtfz), 3); gc()
Y <- PAADPh::round2(gsignal::resample(gtdat1$data$y, vlist$resampfz, gtfz), 3); gc()
Z <- PAADPh::round2(gsignal::resample(gtdat1$data$z, vlist$resampfz, gtfz), 3); gc()
#light <- PAADPh::round2(gsignal::resample(gtdat1$data$light, vlist$resampfz, gtfz), 0); gc()
#battery <- PAADPh::round2(gsignal::resample(gtdat1$data$battery, vlist$resampfz, gtfz), 2); gc()
#temp <- PAADPh::round2(gsignal::resample(gtdat1$data$temp, vlist$resampfz, gtfz), 1); gc()
#time <- seq(gtdat1$data$time[1], gtdat1$data$time[gtlength] + 100, 1/vlist$resampfz); gc()
#time <- head(time, length(x)); gc()
dat <- data.frame(X = X, Y = Y, Z = Z)
rm(X,Y,Z); gc()
dat
}; gc()
finsamprate <- if((vlist$resamp == "True") & (vlist$resampfz != gtfz) & (vlist$resampfz >= 30)){
vlist$resampfz
} else if((vlist$resamp == "True") & (vlist$resampfz != gtfz) & (vlist$resampfz < 30) & (gtfz < 30)){
30
} else if((vlist$resamp == "True") & (vlist$resampfz != gtfz) & (vlist$resampfz < 30) & (gtfz >= 30)){
gtfz
} else if((vlist$resamp == "True") & (vlist$resampfz == gtfz)){
gtfz
} else if(vlist$resamp == "False"){
gtfz
} else{
NULL
}
####Resample for Counts#####
dat3 <- if((finsamprate != 30 & finsamprate != 40 & finsamprate != 50 &
finsamprate != 60 & finsamprate != 70 & finsamprate != 80 &
finsamprate != 90 & finsamprate != 100) &
(sum(vlist$vars=="COUNTS")==1 | sum(vlist$vars=="COUNTS_LF")==1)==T){
rsampdat3 <- function(x){
gsignal::resample(x, 30, gtfz)
}
data.frame(apply(dat1, 2, rsampdat3))
} else{
dat1
}
####Store the Dat3 Sampling Frequency#####
dat3fz <- (nrow(dat3)/nrow(dat1)) * finsamprate
####Restrict Resampled Data to Complete Data for the Epoch Specified#####
dat1 <- head(dat1, trunc(nrow(dat1)/(finsamprate*vlist$epoch))*(finsamprate*vlist$epoch))
dat3 <- head(dat3, trunc(nrow(dat3)/(dat3fz*vlist$epoch))*(dat3fz*vlist$epoch))
} else if(vlist$extenin == "bin"){
###Read Data In####
invisible(gtdat1 <- GENEAread::read.bin(files, verbose=F)); gc()
####Get Data We Need####
gtfz <- gtdat1$freq; gtstime <- as.POSIXct(unlist(gtdat1$header[4, 1]), format="%Y-%m-%d %H:%M:%S", origin = "1970-01-01", tz="UTC")
gtlength <- dim(gtdat1$data.out)[1]
####Resample To Desired Frequency#####
dat1 <- if(gtfz == vlist$resampfz | vlist$resamp == "False"){
dat <- data.frame(gtdat1$data.out[, 2:4]); gc()
names(dat) <- c("X","Y","Z")
dat
} else{
X <- PAADPh::round2(gsignal::resample(gtdat1$data.out[1:gtlength,2], vlist$resampfz, gtfz), 3); gc()
Y <- PAADPh::round2(gsignal::resample(gtdat1$data.out[1:gtlength,3], vlist$resampfz, gtfz), 3); gc()
Z <- PAADPh::round2(gsignal::resample(gtdat1$data.out[1:gtlength,4], vlist$resampfz, gtfz), 3); gc()
#light <- PAADPh::round2(gsignal::resample(gtdat1$data.out[1:gtlength,5], vlist$resampfz, gtfz)/5, 0)*5; gc()
#button <- PAADPh::round2(gsignal::resample(gtdat1$data.out[1:gtlength,6], vlist$resampfz, gtfz), 0); gc()
#temperature <- PAADPh::round2(gsignal::resample(gtdat1$data.out[1:gtlength,7], vlist$resampfz, gtfz), 1); gc()
#timestamp <- seq(gtdat1$page.timestamps[1], (gtdat1$page.timestamps[1] + length(x)/vlist$resampfz) + 1, 1/vlist$resampfz); gc()
#timestamp <- head(timestamp,length(x)); gc()
#timestamp <- as.character(timestamp); gc()
dat <- data.frame(X = X, Y = Y, Z = Z)
rm(X,Y,Z); gc()
dat
}; gc()
finsamprate <- if((vlist$resamp == "True") & (vlist$resampfz != gtfz) & (vlist$resampfz >= 30)){
vlist$resampfz
} else if((vlist$resamp == "True") & (vlist$resampfz != gtfz) & (vlist$resampfz < 30) & (gtfz < 30)){
30
} else if((vlist$resamp == "True") & (vlist$resampfz != gtfz) & (vlist$resampfz < 30) & (gtfz >= 30)){
gtfz
} else if((vlist$resamp == "True") & (vlist$resampfz == gtfz)){
gtfz
} else if(vlist$resamp == "False"){
gtfz
} else{
NULL
}
####Resample for Counts#####
dat3 <- if((finsamprate != 30 & finsamprate != 40 & finsamprate != 50 &
finsamprate != 60 & finsamprate != 70 & finsamprate != 80 &
finsamprate != 90 & finsamprate != 100) &
(sum(vlist$vars=="COUNTS")==1 | sum(vlist$vars=="COUNTS_LF")==1)==T){
rsampdat3 <- function(x){
gsignal::resample(x, 30, gtfz)
}
data.frame(apply(dat1, 2, rsampdat3))
} else{
dat1
}
####Store the Dat3 Sampling Frequency#####
dat3fz <- (nrow(dat3)/nrow(dat1)) * finsamprate
####Restrict Resampled Data to Complete Data for the Epoch Specified#####
dat1 <- head(dat1, trunc(nrow(dat1)/(finsamprate*vlist$epoch))*(finsamprate*vlist$epoch))
dat3 <- head(dat3, trunc(nrow(dat3)/(dat3fz*vlist$epoch))*(dat3fz*vlist$epoch))
####Spoof the GTStime####
gtstime <- data.frame()
} else {
#####Nothing - Not a Recognized File Extension######
NULL
}
####Calculate Variables#####
####MAD###
MAD <- if((sum(vlist$vars=="MAD")==1)==T){
PAADPh::MADcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
}        else{
NULL
} ; gc()
####sVM###
SVM <- if((sum(vlist$vars=="SVM")==1)==T){
PAADPh::SVMcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
} else {
NULL
} ; gc()
####SVMgs###
SVMgs <- if((sum(vlist$vars=="SVMgs")==1)==T){
PAADPh::SVMgscalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch)
} else {
NULL
} ; gc()
####ENMO###
ENMO <- if((sum(vlist$vars=="ENMO")==1)==T){
PAADPh::ENMOcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
} else {
NULL
} ; gc()
####LFENMO###
LFENMO <- if((sum(vlist$vars=="LFENMO")==1)==T){
PAADPh::LFENMOcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
} else {
NULL
} ; gc()
####BFEN###
BFEN <- if((sum(vlist$vars=="BFEN")==1)==T){
PAADPh::BFENcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
} else {
NULL
} ; gc()
####HFEN###
HFEN <- if((sum(vlist$vars=="HFEN")==1)==T){
PAADPh::HFENcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
} else {
NULL
} ; gc()
####HFEN+###
HFENplus <- if((sum(vlist$vars=="HFENp")==1)==T){
PAADPh::HFENpluscalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch) * 1000
} else {
NULL
} ; gc()
####MIMS###
####Why Is This Not Working####
MIMS <- if((sum(vlist$vars=="MIMS")==1)==T){
PAADPh::MIMScalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, vm = NULL, hz = finsamprate, epoch = vlist$epoch, dynr2 = c(-8,8))
} else{
NULL
} ; gc()
####Counts###
CTSX <- if((sum(vlist$vars=="COUNTS" | vlist$vars=="COUNTS_LF")>=1)==T){
PAADPh::agcountscalculate(x = dat3$X, hz = finsamprate, epoch = vlist$epoch)
} else {
NULL
}
CTSXNF <- if((sum(vlist$vars=="COUNTS")==1)==T){
unlist(CTSX[1])
} else {
NULL
}
CTSXLFE <- if((sum(vlist$vars=="COUNTS_LF")==1)==T){
unlist(CTSX[2])
} else {
NULL
}
CTSY <- if((sum(vlist$vars=="COUNTS" | vlist$vars=="COUNTS_LF")>=1)==T){
PAADPh::agcountscalculate(x = dat3$Y, hz = finsamprate, epoch = vlist$epoch)
} else {
NULL
}
CTSYNF <- if((sum(vlist$vars=="COUNTS")==1)==T){
unlist(CTSY[1])
} else {
NULL
}
CTSYLFE <- if((sum(vlist$vars=="COUNTS_LF")==1)==T){
unlist(CTSY[2])
} else {
NULL
}
CTSZ <- if((sum(vlist$vars=="COUNTS" | vlist$vars=="COUNTS_LF")>=1)==T){
PAADPh::agcountscalculate(x = dat3$Z, hz = finsamprate, epoch = vlist$epoch)
} else {
NULL
}
CTSZNF <- if((sum(vlist$vars=="COUNTS")==1)==T){
unlist(CTSZ[1])
} else {
NULL
}
CTSZLFE <- if((sum(vlist$vars=="COUNTS_LF")==1)==T){
unlist(CTSZ[2])
} else {
NULL
}
CTSVMNF <- if((sum(vlist$vars=="COUNTS")==1)==T){
sqrt(CTSXNF^2 + CTSYNF^2 + CTSZNF^2)
} else {
NULL
}
CTSVMLFE <- if((sum(vlist$vars=="COUNTS_LF")==1)==T){
sqrt(CTSXLFE^2 + CTSYLFE^2 + CTSZLFE^2)
} else {
NULL
}
####Sedentary Sphere###
SSPHERE <- if((sum(vlist$vars=="SED_SPHERE")==1)==T){
PAADPh::SSPHEREcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate)
} else {
NULL
}
####Steps Experimental Filter - Waist###
####Need to Investigate This Function###
#STEPS_WAIST_EXP <- if((sum(vlist$vars=="WAISTEPS2")==1)==T){
#  PAADPh::acc2steps(x = dat1$X, y = dat1$Y, z = dat1$Z, Hz = finsamprate, epoch = vlist$epoch)
#} else {
#  NULL
#}
STEPS_WAIST_EXP <- NULL
STEP1 <- if((sum(vlist$vars=="WAISTEPS1" | vlist$vars=="WRISTEPS")>=1)==T){
PAADPh::STEPcalculate(x = dat1$X, y = dat1$Y, z = dat1$Z, hz = finsamprate, epoch = vlist$epoch)
} else {
NULL
}
####Steps Waist###
STEPWAIST <- if((sum(vlist$vars=="WAISTEPS1")==1)==T){
unlist(STEP1[1])
} else {
NULL
}
####Steps Wrist###
STEPWRIST <- if((sum(vlist$vars=="WRISTEPS")==1)==T){
unlist(STEP1[2])
} else {
NULL
}
###Identify What is Going on Here####
###Get the Appropriate Sequence Number####
if(vlist$extenin == "csv" | vlist$extenin == "tab" |
vlist$extenin == "dat" | vlist$extenin == "txt"){
SEQN <- ((chnkfull[1+1])-(chnkfull[1]))/(finsamprate*vlist$epoch)
###Combine Data####
fdat1 <- list(MAD = MAD, SVM = SVM, SVMgs = SVMgs, ENMO = ENMO, LFENMO = LFENMO,
BFEN = BFEN, HFEN = HFEN, HFENplus = HFENplus, MIMS = MIMS,
CTSXNF = CTSXNF, CTSYNF = CTSYNF, CTSZNF = CTSZNF, CTSVMNF = CTSVMNF,
CTSXLFE = CTSXLFE, CTSYLFE = CTSYLFE, CTSZLFE = CTSZLFE, CTSVMLFE = CTSVMLFE,
STEPS_WAIST_EXP = STEPS_WAIST_EXP,
STEPWAIST = STEPWAIST, STEPWRIST = STEPWRIST)
try(fdat1[sapply(fdat1, is.null)] <- NULL, silent=T)
try(fdat1 <- do.call(cbind.data.frame, fdat1), silent=T)
try(fdat1 <- if(chnkfull[iterval]==0){
head(fdat1, chnkfull[iterval+1]/(vlist$samprate*vlist$epoch))
} else if(chnkfull[iterval+1]==max(chnkfull)){
tail(fdat1, (chnkfull[iterval+1]-chnkfull[iterval])/(vlist$samprate*vlist$epoch))
} else {
tail(head(fdat1, ((chnkfull[iterval+1]+120*vlist$samprate)-chnkfull[iterval])/(vlist$samprate*vlist$epoch)),
((chnkfull[iterval+1]-chnkfull[iterval])/(vlist$samprate*vlist$epoch)))
},silent=T)
res1[[length(res1)+1]] =  fdat1
fdat2 <- list(SSPHERE = SSPHERE)
try(fdat2[sapply(fdat2, is.null)] <- NULL, silent=T)
try(fdat2 <- do.call(cbind.data.frame, fdat2), silent=T)
try(fdat2 <- if(chnkfull[iterval]==0){
head(fdat2, chnkfull[iterval+1]/(vlist$samprate*15))
} else if(chnkfull[iterval+1]==max(chnkfull)){
tail(fdat2, (chnkfull[iterval+1]-chnkfull[iterval])/(vlist$samprate*15))
} else {
tail(head(fdat2, ((chnkfull[iterval+1]+120*15)-chnkfull[iterval])/(vlist$samprate*15)),
((chnkfull[iterval+1]-chnkfull[iterval])/(vlist$samprate*15)))
}, silent=T)
res2[[length(res2)+1]] =  fdat2
####Combine the Lists####
return(list(res1=res1, res2=res2))
} else {
###Combine Data####
fdat1 <- list(MAD = MAD, SVM = SVM, SVMgs = SVMgs, ENMO = ENMO, LFENMO = LFENMO,
BFEN = BFEN, HFEN = HFEN, HFENplus = HFENplus, MIMS = MIMS,
CTSXNF = CTSXNF, CTSYNF = CTSYNF, CTSZNF = CTSZNF, CTSVMNF = CTSVMNF,
CTSXLFE = CTSXLFE, CTSYLFE = CTSYLFE, CTSZLFE = CTSZLFE, CTSVMLFE = CTSVMLFE,
STEPS_WAIST_EXP = STEPS_WAIST_EXP,
STEPWAIST = STEPWAIST, STEPWRIST = STEPWRIST)
try(fdat1[sapply(fdat1, is.null)] <- NULL, silent=T)
try(fdat1 <- do.call(cbind.data.frame, fdat1), silent=T)
res1[[length(res1)+1]] =  fdat1
fdat2 <- list(SSPHERE = SSPHERE)
try(fdat2[sapply(fdat2, is.null)] <- NULL, silent=T)
try(fdat2 <- do.call(cbind.data.frame, fdat2), silent=T)
res2[[length(res2)+1]] =  fdat2
gtstimekey[[length(gtstimekey)+1]] = gtstime
####Combine the Lists####
return(list(res1=res1, res2=res2, gtstimekey=gtstimekey))
}
}
#####Lapply Varations for Single/Multi-Threading & Various Platforms#####
#####Linux and MacOS should be faster via mclapply (not possible on windows)####
if(ses=="Windows" & vlist$multithread=="True"){
cl <- parallel::makePSOCKcluster(trunc(0.66*cores))
parallel::clusterExport(cl, c('mprocfunc','nchunks','vlist','cols','res1','res2','cols2',
'chnksize','chnkfull','chnkfullsec','chnkbot','chnktop','files'),
envir=environment())
system.time(resfull <- parallel::parLapply(cl, nchunks, mprocfunc))
parallel::stopCluster(cl)
} else if(vlist$multithread=="False"){
resfull <- lapply(nchunks, mprocfunc)
} else {
resfull <- parallel::mclapply(nchunks, mprocfunc, mc.cores=trunc(cores/2))
}
#####Clean-Up the Merged Data with Output Timestamp######
if(!is.na(names(resfull[[1]][3])) & names(resfull[[1]][3]) == "gtstimekey"){
gtstime <- as.POSIXct(unlist(resfull[[1]][3][[1]]), tz="UTC")
resfull[[1]][3] <- NULL
} else if(is.na(names(resfull[[1]][3]))){
resfull
} else{
resfull
}
###Collapse the Different Data Streams####
###Remove Null Variables####
resint1 <- unlist(resfull, recursive=F)
res1seq <- seq(1, length(resint1), 2); res2seq <- seq(2, length(resint1), 2)
resint2 <- list(do.call("rbind", (do.call("rbind", resint1[res1seq]))),
do.call("rbind", (do.call("rbind", resint1[res2seq])))); gc()
resint2 <- Filter(function(x) dim(x)[2] > 0, resint2)
resc1 <- do.call("cbind", resint2)
resc <- data.frame(SEQN = 1:nrow(resc1),resc1)
####Work on Timestamp####
####Get Appropriate Extension for Passing to Fread####
if(vlist$extenin == "csv" | vlist$extenin == "tab" |
vlist$extenin == "dat" | vlist$extenin == "txt"){
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
flext <- substrRight(files, 3)
sepval <- ifelse(flext=="csv", ",",
ifelse(flext=="tab", "\t", ""))
####Extract All the Appropriate Start Dates/Times/Rows/Formats Etc.######
tstampst <- if(vlist$tstamp=="Yes1"){
####Timestamp in Column###
tcol <- vlist$tcol####Indicated Timestamp Column
tformlow <- data.frame(stringr::str_locate_all(vlist$tform, "[a-z]"))
tformhigh <- data.frame(stringr::str_locate_all(vlist$tform, "[A-Z]"))
tform <- rbind(tformlow,tformhigh); tchars <- tform[with(tform, order(start,end)), ]$start
tcharsv <- unlist(lapply(tchars, function(x) substr(vlist$tform, x, x)))
tformlen <- nchar(vlist$tform); ntchars <- setdiff(1:tformlen, tchars)
ntcharsv <- unlist(lapply(ntchars, function(x) substr(vlist$tform, x, x)))
pchars <- tchars-0.5; pcharsv <- (rep("%", length(pchars)))
tformdat <- data.frame(charsord = c(tchars,ntchars,pchars),
response = c(tcharsv,ntcharsv,pcharsv))
tformdat <- tformdat[with(tformdat, order(charsord)), ]
tformfin <- paste(tformdat$response, collapse="")
tdat <- read.table(files, sep = sepval, header=F, skip=vlist$startrow-1, nrows = 1)[1,1]
as.POSIXct(tdat, format=tformfin, tz="UTC")
} else if(vlist$tstamp=="Yes2"){
###Starting Date/Time in Header####
drow <- vlist$drow######Indicated Date Row in Data####
dformlow <- data.frame(stringr::str_locate_all(vlist$dform, "[a-z]"))
dformhigh <- data.frame(stringr::str_locate_all(vlist$dform, "[A-Z]"))
dform <- rbind(dformlow,dformhigh); dchars <- dform[with(dform, order(start,end)), ]$start
dcharsv <- unlist(lapply(dchars, function(x) substr(vlist$dform, x, x)))
dformlen <- nchar(vlist$dform); ndchars <- setdiff(1:dformlen, dchars)
ndcharsv <- unlist(lapply(ndchars, function(x) substr(vlist$dform, x, x)))
dpchars <- dchars-0.5; dpcharsv <- (rep("%", length(dpchars)))
dformdat <- data.frame(charsord = c(dchars,ndchars,dpchars),
response = c(dcharsv,ndcharsv,dpcharsv))
dformdat <- dformdat[with(dformdat, order(charsord)), ]
dformfin <- paste(dformdat$response, collapse="")
ddat <- as.character(read.table(files, sep = sepval, header=F, skip=vlist$drow-1,nrows = 1)[1,1])
sdval <- gsub("[^0-9.[:punct:]]","",ddat)
trow <- vlist$trow####Indicated Timestamp Column
tform2low <- data.frame(stringr::str_locate_all(vlist$tform2, "[a-z]"))
tform2high <- data.frame(stringr::str_locate_all(vlist$tform2, "[A-Z]"))
tform2 <- rbind(tform2low,tform2high); tchars2 <- tform2[with(tform2, order(start,end)), ]$start
tcharsv2 <- unlist(lapply(tchars2, function(x) substr(vlist$tform2, x, x)))
tform2len <- nchar(vlist$tform2); ntchars2 <- setdiff(1:tform2len, tchars2)
ntcharsv2 <- unlist(lapply(ntchars2, function(x) substr(vlist$tform2, x, x)))
pchars2 <- tchars2-0.5; pcharsv2 <- (rep("%", length(pchars2)))
tform2dat <- data.frame(charsord = c(tchars2,ntchars2,pchars2),
response = c(tcharsv2,ntcharsv2,pcharsv2))
tform2dat <- tform2dat[with(tform2dat, order(charsord)), ]
tform2fin <- paste(tform2dat$response, collapse="")
ttim <- as.character(read.table(files, sep = sepval, header=F, skip=vlist$trow-1,nrows = 1)[1,1])
tival <- gsub("[^0-9.[:punct:]]","",ttim)
stival <- paste(sdval, tival)
stistruct <- paste(dformfin,tform2fin)
as.POSIXct(stival, format=stistruct, tz="UTC")
} else if(vlist$tstamp=="Yes3"){
###Starting Date/Time input by User####
sdate <- vlist$sdate
stime <- vlist$stime
sdtime <- paste(sdate,stime)
as.POSIXct(sdtime, format="%Y-%m-%d %H:%M:%S", tz="UTC")
}else{
NULL
}
#####Create the Actual Timestamp#####
dtimestamp <- if(is.null(tstampst)==F & is.null(as.POSIXct(as.character(tstampst),format="%Y-%m-%d %H:%M:%S"))==F){
as.character(paste(seq(tstampst, (tstampst+(nrow(resc)-1)*vlist$epoch), vlist$epoch)))
} else if(is.null(tstampst)){
NULL
} else{
stop("Timestamp Error: Check Input Date/Time Parameters")
}
} else if(vlist$extenin == "gt3x" | vlist$extenin == "cwa" | vlist$extenin == "bin"){
dtimestamp <- as.character(paste(seq(gtstime, (gtstime + (nrow(resc)-1)*vlist$epoch), vlist$epoch)))
} else{
stop("Timestamp Error: Check Input File Integrity")
}
#####Final Data#####
if(is.null(dtimestamp)){
findat <- resc
} else {
findat <- data.frame(Timestamp = dtimestamp,resc)
}
####Write the Data to File####
fname <- if(nchar(vlist$extenin == 3)){
paste0(vlist$outdir,"/",substr(basename(files),1,nchar(basename(files))-4),vlist$epoch,"sec")
} else if(nchar(vlist$extenin == 4)){
paste0(vlist$outdir,"/",substr(basename(files),1,nchar(basename(files))-5),vlist$epoch,"sec")
} else {
NULL
}
####CSV Files#####
if((sum(vlist$outform==".csv")==1)==T & vlist$rethead=="False"){
data.table::fwrite(findat, paste0(fname,".csv"), sep=",",
showProgress=F,verbose=F)
} else if((sum(vlist$outform==".csv")==1)==T & vlist$rethead=="True"){
hdat <- readr::read_lines(files, skip=0, n_max=(vlist$startrow-1),
na=character())
write.table(hdat, paste0(fname,".csv"), sep=",", col.names=F, row.names=F)
data.table::fwrite(findat, paste0(fname,".csv"), sep=",", append=T, col.names=T,
showProgress=F,verbose=F)
} else {
NULL
}
####TAB Files#####
if((sum(vlist$outform==".tab")==1)==T & vlist$rethead=="False"){
data.table::fwrite(findat, paste0(fname,".tab"), sep="\t",
showProgress=F,verbose=F)
} else if((sum(vlist$outform==".tab")==1)==T & vlist$rethead=="True"){
hdat <- readr::read_lines(files, skip=0, n_max=(vlist$startrow-1),
na=character())
write.table(hdat, paste0(fname,".tab"), sep="\t", col.names=F, row.names=F)
data.table::fwrite(findat, paste0(fname,".tab"), sep="\t", append=T, col.names=T,
showProgress=F,verbose=F)
} else {
NULL
}
####TXT Files#####
if((sum(vlist$outform==".txt")==1)==T & vlist$rethead=="False"){
data.table::fwrite(findat, paste0(fname,".txt"), sep=" ",
showProgress=F,verbose=F)
} else if((sum(vlist$outform==".txt")==1)==T & vlist$rethead=="True"){
hdat <- readr::read_lines(files, skip=0, n_max=(vlist$startrow-1),
na=character())
write.table(hdat, paste0(fname,".txt"), sep=" ", col.names=F, row.names=F)
data.table::fwrite(findat, paste0(fname,".txt"), sep=" ", append=T, col.names=T,
showProgress=F,verbose=F)
} else {
NULL
}
####XLSX Files#####
if((sum(vlist$outform==".xlsx")==1)==T){
writexl::write_xlsx(findat, paste0(fname,".xlsx"))
} else {
NULL
}
pctg <- paste(round(i/n_iter *100, 0), "% completed")
setWinProgressBar(pb, i, label = pctg) # The label will override the label set on the
}
files
