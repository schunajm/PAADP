wdir
getwd()
wdir <- "E:/myapp/R/R-4.3.2/bin"
wdir
libfin <- paste0(substr(wdir,1,nchar(wdir) - 3),"library")
.libPaths(libfin)
.libPaths
.libPaths()
libfin
.libPaths(libfin)
.libPaths()
round2 <- function(x, n) {
posneg = sign(x)
z = abs(x)*10^n
z = z + 0.5
z = trunc(z)
z = z/10^n
z*posneg
}
wdir
outpath <- paste0(substr(wdir,1,nchar(wdir) - 13),"commands/resample/resample_output.txt")
rsap <- read.table(outpath, header = F, sep="\t")
rsap
outpath <- paste0(substr(wdir,1,nchar(wdir) - 13),"commands/resample/resample_output.txt")
rsap <- read.table(outpath, header = F, sep="\t")
rsap
####Grab the Error Log Path and Create Dump File - Populated As Needed###
errpath <- paste0(substr(wdir,1,nchar(wdir) - 13),"errors/resample/errors.txt")
###Clear out the Error File If There######
file.remove(dir(paste0(substr(wdir,1,nchar(wdir) - 13),"errors/resample/"),
pattern = "*.txt", full.names=T))
filen <- NA; pat1 <- NA; pat2 <- NA; pat2b <- NA; pat2c <- NA; pat2d <- NA; pat2e <- NA; pat2f <- NA; pat2g <- NA
startloc <- NA; stoploc <- NA; stoploc1 <- NA; stoploc2 <- NA;
stoploc3 <- NA; stoploc4 <- NA; stoploc5 <- NA; stoploc6 <- NA; stoploc7 <- NA; fnum <- NA; files <- NA; filenames <- NA; samprate <- NA; resampfz <- NA;
vmdatonly <- NA; startrow <- NA; xcol <- NA; ycol <- NA; zcol <- NA; vmcol <- NA; tstamp <- NA; tcol <- NA; tform <- NA;
drow <- NA; dform <- NA; trow <- NA; tform2 <- NA; sdate <- NA; stime <- NA; rethead <- NA; outform <- NA; matchadc <- NA;
adcbit <- NA; dynrang <- NA; outdir <- NA; multithread <- NA
sysin <- paste(Sys.info()[1])
if(sysin == "Windows"){
try(filen <- gsub("\\\\", "/", substr(rsap[6,1], 18, nchar(rsap[6,1]))))
try(pat1 <- "([:upper:][:])"); try(pat2 <- "([.][g][t][3][x])"); try(pat2b <- "([.][b][i][n])"); try(pat2c <- "([.][c][w][a])")
try(pat2d <- "([.][t][x][t])"); try(pat2e <- "([.][d][a][t])"); try(pat2f <- "([.][t][a][b])"); try(pat2g <- "([.][c][s][v])")
try(startloc <- data.frame(stringr::str_locate_all(filen, pat1))); try(stoploc1 <- data.frame(stringr::str_locate_all(filen, pat2)))
try(stoploc2 <- data.frame(stringr::str_locate_all(filen, pat2b))); try(stoploc3 <- data.frame(stringr::str_locate_all(filen, pat2c)))
try(stoploc4 <- data.frame(stringr::str_locate_all(filen, pat2d))); try(stoploc5 <- data.frame(stringr::str_locate_all(filen, pat2e)))
try(stoploc6 <- data.frame(stringr::str_locate_all(filen, pat2f))); try(stoploc7 <- data.frame(stringr::str_locate_all(filen, pat2g)))
try(stoploc <- rbind(stoploc1,stoploc2,stoploc3,stoploc4,stoploc5,stoploc6,stoploc7))
try(fnum <- 1:nrow(startloc)); try(filenames <- c())
try(for(i in fnum){
files[i] <- substr(filen, startloc$start[i], stoploc$end[i])
filenames[i] <- files[i]
})
} else if (sysin == "Linux"){
NULL
} else {
NULL
}
try(samprate <- as.numeric(substr(rsap[9,1], 14, nchar(rsap[9,1])))); try(resampfz <- as.numeric(substr(rsap[10,1], 16, nchar(rsap[10,1]))))
try(vmdataonly <- substr(rsap[19,1], 15, nchar(rsap[19,1])))
try(startrow <- as.numeric(substr(rsap[11,1], 17, nchar(rsap[11,1]))))
try(xcol <- as.numeric(substr(rsap[12,1], 16, nchar(rsap[12,1])))); try(ycol <- as.numeric(substr(rsap[13,1], 16, nchar(rsap[13,1]))))
try(zcol <- as.numeric(substr(rsap[14,1], 16, nchar(rsap[14,1])))); try(vmcol <- as.numeric(substr(rsap[15,1], 12, nchar(rsap[15,1]))))
try(tstamp <- ifelse(substr(rsap[24,1], 12, nchar(rsap[24,1])) == "True", "Yes1",
ifelse(substr(rsap[25,1], 12, nchar(rsap[25,1])) == "True", "Yes2",
ifelse(substr(rsap[26,1], 13, nchar(rsap[26,1])) == "True", "Yes3", "No"))))
try(tcol <- as.numeric(substr(rsap[16,1], 19, nchar(rsap[16,1])))); try(tform <- substr(rsap[1,1], 17, nchar(rsap[1,1])))
try(drow <- as.numeric(substr(rsap[17,1], 11, nchar(rsap[17,1])))); try(dform <- substr(rsap[2,1], 12, nchar(rsap[2,1])))
try(trow <- as.numeric(substr(rsap[18,1], 11, nchar(rsap[18,1])))); try(tform2 <- substr(rsap[3,1], 12, nchar(rsap[3,1])))
try(sdate <- substr(rsap[7,1], 13, nchar(rsap[7,1]))); try(stime <- substr(rsap[8,1], 13, nchar(rsap[8,1])))
try(rethead <- substr(rsap[28,1], 13, nchar(rsap[28,1])))
try(out1 <- ifelse(substr(rsap[20,1], 13, nchar(rsap[20,1]))  == "True", ".csv", NA))
try(out2 <- ifelse(substr(rsap[21,1], 13, nchar(rsap[21,1]))  == "True", ".tab", NA))
try(out3 <- ifelse(substr(rsap[22,1], 13, nchar(rsap[22,1]))  == "True", ".txt", NA))
try(out4 <- ifelse(substr(rsap[23,1], 14, nchar(rsap[23,1]))  == "True", ".xlsx", NA))
try(outform <- as.vector(na.omit(c(out1,out2,out3,out4))))
try(matchadc <- substr(rsap[30,1], 10, nchar(rsap[30,1]))); try(adcbit <- as.numeric(substr(rsap[4,1], 11, 12)))
try(dynrang <- substr(rsap[5,1], 16, nchar(rsap[5,1])))
try(multithread <- substr(rsap[32,1], 12, nchar(rsap[32,1])))
try(outdir <- paste0(gsub("\\\\", "/",substr(rsap[34,1], 20, nchar(rsap[34,1]))),"/"))
vlist <- list(filenames = filenames, samprate = samprate, resampfz = resampfz, vmdataonly = vmdataonly, startrow = startrow,
xcol = xcol, ycol = ycol, zcol = zcol, vmcol = vmcol, tstamp = tstamp, tcol = tcol,
tform = tform, drow = drow, dform = dform, trow = trow, tform2 = tform2, sdate = sdate,
stime = stime,  rethead = rethead, outform = outform, matchadc = matchadc, adcbit = adcbit, dynrang = dynrang,
outdir = outdir, multithread = multithread)
###Get OS###
ses <- Sys.info()[['sysname']]
###Get number of cores###
cores <- parallel::detectCores()
###Get Indices for Files###
plen <- 1:length(vlist$filenames)
plenmax <- max(plen)
###Calculate ADC Resolution###
bitval <- as.numeric(stringr::str_extract(vlist$adcbit,"[[:digit:]]+"))
dynrange <- as.numeric(stringr::str_extract(vlist$dynrang, "[[:digit:]]+"))
filenames
files <- filenames
files
####Get File Type####
exten <- substr(files, nchar(files) - 3, nchar(files))
exten
vlist
col1 <- if(vlist$vmdataonly == T){
vlist$vmcol
} else{
vlist$xcol
}
col1
cols <- if(vlist$vmdataonly == T){
data.frame(cols = c(vlist$vmcol),
collabs = c("VM"))
} else{
data.frame(cols = c(vlist$xcol,vlist$ycol,vlist$zcol),
collabs = c("X","Y","Z"))
}
cols2 <- na.omit(cols)
head(cols2)
filelen <- nrow(data.table::fread(files, select=col1, skip=(vlist$startrow - 1), showProgress=F)); gc
effilelen <- trunc(filelen/(vlist$samprate))*(vlist$samprate);
filelen
effilelen
###Create Chunk Indices###
chnksval <- 10000000; chnksize <- trunc(chnksval/(vlist$samprate))*(vlist$samprate)
bchnks <- trunc(effilelen/chnksize)-1; chnkseq <- 1:bchnks;
chnkint <- chnkseq*chnksize; chnkfull <- c(0, chnkint, effilelen)
chnkfullsec <- c(0, chnkint/vlist$samprate, effilelen/vlist$samprate)
chnkbot <- c(0, chnkint-(vlist$samprate*120)); chnktop <- c(chnkint+(vlist$samprate*120), effilelen)
if(effilelen < (chnksval)){
chnkbot <- 0
chnktop <- effilelen
} else{
chnkbot <- chnkbot
chnktop <- chnktop
}
nchunks <- 1:length(chnkbot)
iterval <- nchunks
#print(iterval)
####Get Appropriate Extension for Passing to Fread####
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
flext <- substrRight(files, 3)
sepval <- ifelse(flext=="csv", ",",
ifelse(flext=="tab", "\t", " "))
####Read-in the Data#####
dat <- data.table::fread(files, sep = sepval, select=na.omit(cols$cols), skip=(chnkbot[iterval]+(vlist$startrow - 1)),
nrows=((chnktop[iterval]-chnkbot[iterval])), col.names=as.character(cols2$collabs)); gc()
head(dat)
decimalplaces <- function(x) {
if ((x %% 1) != 0) {
nchar(strsplit(sub('0+$', '', as.character(x)), ".", fixed=TRUE)[[1]][[2]])
} else {
return(0)
}
}
decimalplaces
dectest <- sample(data.frame(dat)[,1], 1000, replace=T)
ndec <- max(sapply(dectest, decimalplaces))
dectest
ndec
testdiv <- vlist$samprate / vlist$resampfz
testdivint <- testdiv%%1==0
dat1 <- if(testdiv >= 2 & testdivint==T){
rsampdat <- function(x){
x[seq(1, length(x), testdiv)]
}
data.frame(apply(dat, 2, rsampdat))
} else if(testdiv == 1){
dat
} else{
rsampdat1 <- function(x){
round(gsignal::resample(x, vlist$resampfz, vlist$samprate), ndec)
}
data.frame(apply(dat, 2, rsampdat1))
} ; gc()
head(dat1)
dat1 <- if(vlist$matchadc=="False"){
dat1
} else if(vlist$matchadc=="True" & testdiv >= 2 & testdivint==T){
dat1
} else {
acl <- round(seq((dynrange*-1), dynrange, ((2*dynrange)/(2^bitval))), 4)
nearest.vec <- function(x, acl){
smallCandidate <- findInterval(x, acl, all.inside=TRUE)
largeCandidate <- smallCandidate + 1
#nudge is TRUE if large candidate is nearer, FALSE otherwise
nudge <- 2 * x > acl[smallCandidate] + acl[largeCandidate]
return(acl[smallCandidate + nudge])
}
data.frame(apply(dat1, 2, nearest.vec, acl))
} ; gc()
chnkfullre <- chnkfull*(vlist$resampfz/vlist$samprate)
chnkfullrebot <- chnkbot*(vlist$resampfz/vlist$samprate)
chnkfullretop <- chnktop*(vlist$resampfz/vlist$samprate)
tstampst <- if(vlist$tstamp=="Yes1"){
####Timestamp in Column###
tcol <- vlist$tcol####Indicated Timestamp Column
tformlow <- data.frame(stringr::str_locate_all(vlist$tform, "[a-z]"))
tformhigh <- data.frame(stringr::str_locate_all(vlist$tform, "[A-Z]"))
tform <- rbind(tformlow,tformhigh); tchars <- tform[with(tform, order(start,end)), ]$start
tcharsv <- unlist(lapply(tchars, function(x) substr(vlist$tform, x, x)))
tformlen <- nchar(vlist$tform); ntchars <- setdiff(1:tformlen, tchars)
ntcharsv <- unlist(lapply(ntchars, function(x) substr(vlist$tform, x, x)))
pchars <- tchars-0.5; pcharsv <- (rep("%", length(pchars)))
tformdat <- data.frame(charsord = c(tchars,ntchars,pchars),
response = c(tcharsv,ntcharsv,pcharsv))
tformdat <- tformdat[with(tformdat, order(charsord)), ]
tformfin <- paste(tformdat$response, collapse="")
tdat <- read.table(files, sep = sepval, header=F, skip=vlist$startrow-1, nrows = 1)[1,1]
as.POSIXct(tdat, format=tformfin, tz="UTC", origin = "1970-01-01")
} else if(vlist$tstamp=="Yes2"){
###Starting Date/Time in Header####
drow <- vlist$drow######Indicated Date Row in Data####
dformlow <- data.frame(stringr::str_locate_all(vlist$dform, "[a-z]"))
dformhigh <- data.frame(stringr::str_locate_all(vlist$dform, "[A-Z]"))
dform <- rbind(dformlow,dformhigh); dchars <- dform[with(dform, order(start,end)), ]$start
dcharsv <- unlist(lapply(dchars, function(x) substr(vlist$dform, x, x)))
dformlen <- nchar(vlist$dform); ndchars <- setdiff(1:dformlen, dchars)
ndcharsv <- unlist(lapply(ndchars, function(x) substr(vlist$dform, x, x)))
dpchars <- dchars-0.5; dpcharsv <- (rep("%", length(dpchars)))
dformdat <- data.frame(charsord = c(dchars,ndchars,dpchars),
response = c(dcharsv,ndcharsv,dpcharsv))
dformdat <- dformdat[with(dformdat, order(charsord)), ]
dformfin <- paste(dformdat$response, collapse="")
ddat <- as.character(read.table(files, sep = sepval, header=F, skip=vlist$drow-1,nrows = 1)[1,1])
sdval <- gsub("[^0-9.[:punct:]]","",ddat)
trow <- vlist$trow####Indicated Timestamp Column
tform2low <- data.frame(stringr::str_locate_all(vlist$tform2, "[a-z]"))
tform2high <- data.frame(stringr::str_locate_all(vlist$tform2, "[A-Z]"))
tform2 <- rbind(tform2low,tform2high); tchars2 <- tform2[with(tform2, order(start,end)), ]$start
tcharsv2 <- unlist(lapply(tchars2, function(x) substr(vlist$tform2, x, x)))
tform2len <- nchar(vlist$tform2); ntchars2 <- setdiff(1:tform2len, tchars2)
ntcharsv2 <- unlist(lapply(ntchars2, function(x) substr(vlist$tform2, x, x)))
pchars2 <- tchars2-0.5; pcharsv2 <- (rep("%", length(pchars2)))
tform2dat <- data.frame(charsord = c(tchars2,ntchars2,pchars2),
response = c(tcharsv2,ntcharsv2,pcharsv2))
tform2dat <- tform2dat[with(tform2dat, order(charsord)), ]
tform2fin <- paste(tform2dat$response, collapse="")
ttim <- as.character(read.table(files, sep = sepval, header=F, skip=vlist$trow-1,nrows = 1)[1,1])
tival <- gsub("[^0-9.[:punct:]]","",ttim)
stival <- paste(sdval, tival)
stistruct <- paste(dformfin,tform2fin)
as.POSIXct(stival, format=stistruct, tz="UTC", origin = "1970-01-01")
} else if(vlist$tstamp=="Yes3"){
###Starting Date/Time input by User####
sdate <- vlist$sdate
stime <- vlist$stime
sdtime <- paste(sdate,stime)
as.POSIXct(sdtime, format="%Y-%m-%d %H:%M:%S", tz="UTC", origin = "1970-01-01")
}else{
NULL
}
dtimestamp <- if(is.null(tstampst)==F & is.null(as.POSIXct(as.character(tstampst),format="%Y-%m-%d %H:%M:%S", origin = "1970-01-01"))==F){
format(seq(tstampst, (tstampst+(nrow(dat1))*(1/vlist$resampfz)), (1/vlist$resampfz)),"%Y-%m-%d %H:%M:%S")
} else if(is.null(tstampst)){
NULL
} else{
stop("Timestamp Error: Check Input Date/Time Parameters")
}; gc()
dtimestamp <- head(dtimestamp, nrow(dat1)); gc()
head(dtimestamp)
####Final Data#####
if(is.null(dtimestamp)){
findat <- dat1
} else {
findat <- data.frame(Timestamp = dtimestamp,dat1)
}; gc()
head(findat)
if(iterval == 1){
findat <- head(findat, -(vlist$resampfz*120))
} else if (iterval < max(iterval)){
findat <- head(tail(findat, -(vlist$resampfz*120)), -(vlist$resampfz*120))
} else {
findat <- tail(findat, -(vlist$resampfz*120))
}
fname <- if(substr(vlist$outdir, nchar(vlist$outdir), nchar(vlist$outdir)) == "/"){
paste0(vlist$outdir,substr(basename(files),1,nchar(basename(files))-4),vlist$resampfz,"Hz")
} else{
paste0(vlist$outdir,"/",substr(basename(files),1,nchar(basename(files))-4),vlist$resampfz,"Hz")
}
fname
hdlist <- lapply(1:(vlist$startrow - 1), function(x){
skipval <- x-1
hddat <- read.table(files, sep=sepval, header=F, nrows = 1, skip = skipval)
hddat
})
hdlist
write.table(hdlist[[1]], paste0(fname,outformat), sep = sepval2, quote=F, append=F, col.names=F, row.names=F)
vlist$outform
outformat <- ".csv"
write.table(hdlist[[1]], paste0(fname,outformat), sep = sepval2, quote=F, append=F, col.names=F, row.names=F)
sepval2 <- ","
write.table(hdlist[[1]], paste0(fname,outformat), sep = sepval2, quote=F, append=F, col.names=F, row.names=F)
hdlist[[1]]
nrow(dat1)/nrow(dat)
100/80
length(iterval)
read.table(file=file.choose(), header=F, nrows = 1)
read.table(file=file.choose(), header=F, sep = ",", nrows = 1)
read.table(file=file.choose(), header=F, sep = ",", nrows = 1)
test <- read.csv(file=file.choose(), skip = 10)
1310600 * (80/100)
